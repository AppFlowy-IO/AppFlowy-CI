name: Webhook Receiver for Private Repo

on:
  repository_dispatch:
    types: [private-repo-webhook]
  workflow_dispatch:
    inputs:
      event_type:
        description: 'Event type (pr_opened, pr_sync, push)'
        required: true
        type: choice
        options:
          - pr_opened
          - pr_sync
          - push
      pr_number:
        description: 'PR number (for PR events)'
        required: false
        type: string
      pr_ref:
        description: 'Git ref/branch to test'
        required: true
        type: string
      workflows:
        description: 'Workflows to trigger (comma-separated: flutter,rust,mobile,ios,rust_coverage,docker,commit_lint)'
        required: true
        type: string
        default: 'flutter,rust'

concurrency:
  # Use PR number for grouping, fallback to a unique identifier for push events
  group: webhook-pr-${{ github.event.client_payload.pr_number || github.event.inputs.pr_number || format('push-{0}', github.event.client_payload.pr_ref || github.event.inputs.pr_ref || github.run_id) }}
  cancel-in-progress: true

jobs:
  dispatch-workflows:
    runs-on: ubuntu-latest
    outputs:
      flutter_run_url: ${{ steps.get_run_urls.outputs.flutter_run_url }}
      rust_run_url: ${{ steps.get_run_urls.outputs.rust_run_url }}
      mobile_run_url: ${{ steps.get_run_urls.outputs.mobile_run_url }}
      ios_run_url: ${{ steps.get_run_urls.outputs.ios_run_url }}
      rust_coverage_run_url: ${{ steps.get_run_urls.outputs.rust_coverage_run_url }}
      docker_run_url: ${{ steps.get_run_urls.outputs.docker_run_url }}
      commit_lint_run_url: ${{ steps.get_run_urls.outputs.commit_lint_run_url }}
    steps:
      - name: Parse event data
        id: parse
        run: |
          # Extract data from either repository_dispatch or workflow_dispatch
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "event_type=${{ github.event.client_payload.event_type }}" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.client_payload.pr_number }}" >> $GITHUB_OUTPUT
            echo "pr_ref=${{ github.event.client_payload.pr_ref }}" >> $GITHUB_OUTPUT
            echo "workflows=${{ github.event.client_payload.workflows }}" >> $GITHUB_OUTPUT
          else
            echo "event_type=${{ github.event.inputs.event_type }}" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "pr_ref=${{ github.event.inputs.pr_ref }}" >> $GITHUB_OUTPUT
            echo "workflows=${{ github.event.inputs.workflows }}" >> $GITHUB_OUTPUT
          fi

          # Generate unique execution ID for this webhook trigger
          echo "execution_id=exec-$(date +%s)-${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Display event information
        run: |
          echo "Event Type: ${{ steps.parse.outputs.event_type }}"
          echo "PR Number: ${{ steps.parse.outputs.pr_number }}"
          echo "Git Ref: ${{ steps.parse.outputs.pr_ref }}"
          echo "Workflows: ${{ steps.parse.outputs.workflows }}"
          echo "Execution ID: ${{ steps.parse.outputs.execution_id }}"

      - name: Trigger Flutter CI
        if: contains(steps.parse.outputs.workflows, 'flutter')
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          event-type: private-repo-flutter-ci
          client-payload: |
            {
              "pr_number": "${{ steps.parse.outputs.pr_number }}",
              "pr_ref": "${{ steps.parse.outputs.pr_ref }}",
              "event_type": "${{ steps.parse.outputs.event_type }}",
              "execution_id": "${{ steps.parse.outputs.execution_id }}",
              "workflow_type": "flutter"
            }

      - name: Trigger Rust CI
        if: contains(steps.parse.outputs.workflows, 'rust')
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          event-type: private-repo-rust-ci
          client-payload: |
            {
              "pr_number": "${{ steps.parse.outputs.pr_number }}",
              "pr_ref": "${{ steps.parse.outputs.pr_ref }}",
              "event_type": "${{ steps.parse.outputs.event_type }}",
              "execution_id": "${{ steps.parse.outputs.execution_id }}",
              "workflow_type": "rust"
            }

      - name: Trigger Mobile CI
        if: contains(steps.parse.outputs.workflows, 'mobile')
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          event-type: private-repo-mobile-ci
          client-payload: |
            {
              "pr_number": "${{ steps.parse.outputs.pr_number }}",
              "pr_ref": "${{ steps.parse.outputs.pr_ref }}",
              "event_type": "${{ steps.parse.outputs.event_type }}",
              "execution_id": "${{ steps.parse.outputs.execution_id }}",
              "workflow_type": "mobile"
            }

      - name: Trigger iOS CI
        if: contains(steps.parse.outputs.workflows, 'ios')
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          event-type: private-repo-ios-ci
          client-payload: |
            {
              "pr_number": "${{ steps.parse.outputs.pr_number }}",
              "pr_ref": "${{ steps.parse.outputs.pr_ref }}",
              "event_type": "${{ steps.parse.outputs.event_type }}",
              "execution_id": "${{ steps.parse.outputs.execution_id }}",
              "workflow_type": "ios"
            }

      - name: Trigger Rust Coverage
        if: contains(steps.parse.outputs.workflows, 'rust_coverage')
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          event-type: private-repo-rust-coverage
          client-payload: |
            {
              "pr_number": "${{ steps.parse.outputs.pr_number }}",
              "pr_ref": "${{ steps.parse.outputs.pr_ref }}",
              "event_type": "${{ steps.parse.outputs.event_type }}",
              "execution_id": "${{ steps.parse.outputs.execution_id }}",
              "workflow_type": "rust_coverage"
            }

      - name: Trigger Docker CI
        if: contains(steps.parse.outputs.workflows, 'docker')
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          event-type: private-repo-docker-ci
          client-payload: |
            {
              "pr_number": "${{ steps.parse.outputs.pr_number }}",
              "pr_ref": "${{ steps.parse.outputs.pr_ref }}",
              "event_type": "${{ steps.parse.outputs.event_type }}",
              "execution_id": "${{ steps.parse.outputs.execution_id }}",
              "workflow_type": "docker"
            }

      - name: Trigger Commit Lint
        if: contains(steps.parse.outputs.workflows, 'commit_lint')
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          event-type: private-repo-commit-lint
          client-payload: |
            {
              "pr_number": "${{ steps.parse.outputs.pr_number }}",
              "pr_ref": "${{ steps.parse.outputs.pr_ref }}",
              "event_type": "${{ steps.parse.outputs.event_type }}",
              "execution_id": "${{ steps.parse.outputs.execution_id }}",
              "workflow_type": "commit_lint"
            }

      - name: Wait for workflows to start and get run URLs
        id: get_run_urls
        env:
          ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          WORKFLOWS: ${{ steps.parse.outputs.workflows }}
        run: |
          echo "‚è≥ Waiting for workflows to start and fetching run URLs..."

          # Define workflow file names
          declare -A workflow_files=(
            ["flutter"]="flutter_ci.yaml"
            ["rust"]="rust_ci.yaml"
            ["mobile"]="mobile_ci.yml"
            ["ios"]="ios_ci.yaml"
            ["rust_coverage"]="rust_coverage.yml"
            ["docker"]="docker_ci.yml"
            ["commit_lint"]="commit_lint.yml"
          )

          # Get list of workflows to monitor
          IFS=',' read -ra WORKFLOW_ARRAY <<< "$WORKFLOWS"

          # Wait a bit for workflows to start
          sleep 10

          # Fetch run URLs for each triggered workflow
          flutter_run_url=""
          rust_run_url=""
          mobile_run_url=""
          ios_run_url=""
          rust_coverage_run_url=""
          docker_run_url=""
          commit_lint_run_url=""

          for workflow in "${WORKFLOW_ARRAY[@]}"; do
            workflow_file="${workflow_files[$workflow]}"
            if [ -n "$workflow_file" ]; then
              echo "Fetching latest run for workflow: $workflow_file"

              # Get the latest workflow runs
              response=$(curl -s -H "Authorization: token $ADMIN_GITHUB_TOKEN" \
                "https://api.github.com/repos/AppFlowy-IO/AppFlowy-CI/actions/workflows/$workflow_file/runs?per_page=5")

              # Find the most recent repository_dispatch run (should be ours)
              for i in {0..4}; do
                run_event=$(echo "$response" | jq -r --arg i "$i" '.workflow_runs[$i | tonumber].event // "null"')
                run_created=$(echo "$response" | jq -r --arg i "$i" '.workflow_runs[$i | tonumber].created_at // "null"')
                run_url=$(echo "$response" | jq -r --arg i "$i" '.workflow_runs[$i | tonumber].html_url // "null"')

                if [ "$run_event" = "null" ]; then
                  break
                fi

                # Check if this run is from repository_dispatch and recent (within last 5 minutes)
                if [ "$run_event" = "repository_dispatch" ]; then
                  run_created_timestamp=$(date -d "$run_created" +%s 2>/dev/null || echo "0")
                  current_timestamp=$(date +%s)
                  time_diff=$((current_timestamp - run_created_timestamp))

                  # If the run was created within the last 5 minutes, assume it's ours
                  if [ $time_diff -le 300 ]; then
                    case $workflow in
                      "flutter")
                        flutter_run_url="$run_url"
                        ;;
                      "rust")
                        rust_run_url="$run_url"
                        ;;
                      "mobile")
                        mobile_run_url="$run_url"
                        ;;
                      "ios")
                        ios_run_url="$run_url"
                        ;;
                      "rust_coverage")
                        rust_coverage_run_url="$run_url"
                        ;;
                      "docker")
                        docker_run_url="$run_url"
                        ;;
                      "commit_lint")
                        commit_lint_run_url="$run_url"
                        ;;
                    esac
                    echo "Found run URL for $workflow: $run_url"
                    break
                  fi
                fi
              done
            fi
          done

          # Store the run URLs
          echo "flutter_run_url=$flutter_run_url" >> $GITHUB_OUTPUT
          echo "rust_run_url=$rust_run_url" >> $GITHUB_OUTPUT
          echo "mobile_run_url=$mobile_run_url" >> $GITHUB_OUTPUT
          echo "ios_run_url=$ios_run_url" >> $GITHUB_OUTPUT
          echo "rust_coverage_run_url=$rust_coverage_run_url" >> $GITHUB_OUTPUT
          echo "docker_run_url=$docker_run_url" >> $GITHUB_OUTPUT
          echo "commit_lint_run_url=$commit_lint_run_url" >> $GITHUB_OUTPUT

  create-pr-comment:
    runs-on: ubuntu-latest
    needs: [dispatch-workflows]
    if: github.event.client_payload.pr_number || github.event.inputs.pr_number
    steps:
      - name: Parse event data
        id: parse
        run: |
          # Extract data from either repository_dispatch or workflow_dispatch
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "pr_number=${{ github.event.client_payload.pr_number }}" >> $GITHUB_OUTPUT
            echo "workflows=${{ github.event.client_payload.workflows }}" >> $GITHUB_OUTPUT
            echo "pr_ref=${{ github.event.client_payload.pr_ref }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "workflows=${{ github.event.inputs.workflows }}" >> $GITHUB_OUTPUT
            echo "pr_ref=${{ github.event.inputs.pr_ref }}" >> $GITHUB_OUTPUT
          fi

          # Generate timestamp for this CI run
          echo "timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Generate workflow links
        id: links
        run: |
          workflows="${{ steps.parse.outputs.workflows }}"
          pr_number="${{ steps.parse.outputs.pr_number }}"

          # Get run URLs from the dispatch-workflows job
          flutter_run_url="${{ needs.dispatch-workflows.outputs.flutter_run_url }}"
          rust_run_url="${{ needs.dispatch-workflows.outputs.rust_run_url }}"
          mobile_run_url="${{ needs.dispatch-workflows.outputs.mobile_run_url }}"
          ios_run_url="${{ needs.dispatch-workflows.outputs.ios_run_url }}"
          rust_coverage_run_url="${{ needs.dispatch-workflows.outputs.rust_coverage_run_url }}"
          docker_run_url="${{ needs.dispatch-workflows.outputs.docker_run_url }}"
          commit_lint_run_url="${{ needs.dispatch-workflows.outputs.commit_lint_run_url }}"

          # Generate workflow links based on requested workflows with actual run URLs
          flutter_link=""
          rust_link=""
          mobile_link=""
          ios_link=""
          rust_coverage_link=""
          docker_link=""
          commit_lint_link=""

          if [[ "$workflows" == *"flutter"* ]]; then
            if [ -n "$flutter_run_url" ]; then
              flutter_link="- **Flutter CI/CD**: [$flutter_run_url]($flutter_run_url) (PR #${pr_number})"
            else
              flutter_link="- **Flutter CI/CD**: [View Workflow](https://github.com/AppFlowy-IO/AppFlowy-CI/actions/workflows/flutter_ci.yaml) (PR #${pr_number}) - Starting up..."
            fi
          fi

          if [[ "$workflows" == *"rust"* ]]; then
            if [ -n "$rust_run_url" ]; then
              rust_link="- **Rust Testing**: [$rust_run_url]($rust_run_url) (PR #${pr_number})"
            else
              rust_link="- **Rust Testing**: [View Workflow](https://github.com/AppFlowy-IO/AppFlowy-CI/actions/workflows/rust_ci.yaml) (PR #${pr_number}) - Starting up..."
            fi
          fi

          if [[ "$workflows" == *"mobile"* ]]; then
            if [ -n "$mobile_run_url" ]; then
              mobile_link="- **Mobile CI (iOS/Android)**: [$mobile_run_url]($mobile_run_url) (PR #${pr_number})"
            else
              mobile_link="- **Mobile CI (iOS/Android)**: [View Workflow](https://github.com/AppFlowy-IO/AppFlowy-CI/actions/workflows/mobile_ci.yml) (PR #${pr_number}) - Starting up..."
            fi
          fi

          if [[ "$workflows" == *"ios"* ]]; then
            if [ -n "$ios_run_url" ]; then
              ios_link="- **iOS CI**: [$ios_run_url]($ios_run_url) (PR #${pr_number})"
            else
              ios_link="- **iOS CI**: [View Workflow](https://github.com/AppFlowy-IO/AppFlowy-CI/actions/workflows/ios_ci.yaml) (PR #${pr_number}) - Starting up..."
            fi
          fi

          if [[ "$workflows" == *"rust_coverage"* ]]; then
            if [ -n "$rust_coverage_run_url" ]; then
              rust_coverage_link="- **Rust Coverage**: [$rust_coverage_run_url]($rust_coverage_run_url) (PR #${pr_number})"
            else
              rust_coverage_link="- **Rust Coverage**: [View Workflow](https://github.com/AppFlowy-IO/AppFlowy-CI/actions/workflows/rust_coverage.yml) (PR #${pr_number}) - Starting up..."
            fi
          fi

          if [[ "$workflows" == *"docker"* ]]; then
            if [ -n "$docker_run_url" ]; then
              docker_link="- **Docker CI**: [$docker_run_url]($docker_run_url) (PR #${pr_number})"
            else
              docker_link="- **Docker CI**: [View Workflow](https://github.com/AppFlowy-IO/AppFlowy-CI/actions/workflows/docker_ci.yml) (PR #${pr_number}) - Starting up..."
            fi
          fi

          if [[ "$workflows" == *"commit_lint"* ]]; then
            if [ -n "$commit_lint_run_url" ]; then
              commit_lint_link="- **Commit Lint**: [$commit_lint_run_url]($commit_lint_run_url) (PR #${pr_number})"
            else
              commit_lint_link="- **Commit Lint**: [View Workflow](https://github.com/AppFlowy-IO/AppFlowy-CI/actions/workflows/commit_lint.yml) (PR #${pr_number}) - Starting up..."
            fi
          fi

          # Store the links
          echo "flutter_link=$flutter_link" >> $GITHUB_OUTPUT
          echo "rust_link=$rust_link" >> $GITHUB_OUTPUT
          echo "mobile_link=$mobile_link" >> $GITHUB_OUTPUT
          echo "ios_link=$ios_link" >> $GITHUB_OUTPUT
          echo "rust_coverage_link=$rust_coverage_link" >> $GITHUB_OUTPUT
          echo "docker_link=$docker_link" >> $GITHUB_OUTPUT
          echo "commit_lint_link=$commit_lint_link" >> $GITHUB_OUTPUT

      - name: Post CI status comment to private repo PR
        env:
          ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.parse.outputs.pr_number }}
        run: |
          # Create the comment body
          cat > comment_body.md << 'EOF'
          ## üöÄ CI/CD Pipeline Status - PR #${{ steps.parse.outputs.pr_number }}

          **Started**: ${{ steps.parse.outputs.timestamp }}
          **Branch**: `${{ steps.parse.outputs.pr_ref }}`
          **Run ID**: `${{ github.run_id }}`

          Your PR has triggered our CI/CD pipeline in the public repository. You can monitor the test results and build status here:

          ### üìä CI Dashboard
          **Main CI Workflows**: https://github.com/AppFlowy-IO/AppFlowy-CI/actions

          ### üîó Running Workflows for PR #${{ steps.parse.outputs.pr_number }}

          ${{ steps.links.outputs.flutter_link }}
          ${{ steps.links.outputs.rust_link }}
          ${{ steps.links.outputs.mobile_link }}
          ${{ steps.links.outputs.ios_link }}
          ${{ steps.links.outputs.rust_coverage_link }}
          ${{ steps.links.outputs.docker_link }}
          ${{ steps.links.outputs.commit_lint_link }}

          EOF

          # Remove empty lines from workflow links
          sed -i '/^$/d' comment_body.md

          # Post the comment to the private repository PR
          curl -X POST \
            -H "Authorization: token $ADMIN_GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/AppFlowy-IO/AppFlowy-Premium/issues/$PR_NUMBER/comments \
            -d "{\"body\": $(jq -Rs . < comment_body.md)}"

          echo "‚úÖ Posted CI status comment to private repo PR #$PR_NUMBER"

  auto-approve-pr:
    runs-on: ubuntu-latest
    needs: [create-pr-comment]
    if: github.event.client_payload.pr_number || github.event.inputs.pr_number
    steps:
      - name: Parse event data
        id: parse
        run: |
          # Extract data from either repository_dispatch or workflow_dispatch
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "pr_number=${{ github.event.client_payload.pr_number }}" >> $GITHUB_OUTPUT
            echo "workflows=${{ github.event.client_payload.workflows }}" >> $GITHUB_OUTPUT
            echo "pr_ref=${{ github.event.client_payload.pr_ref }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "workflows=${{ github.event.inputs.workflows }}" >> $GITHUB_OUTPUT
            echo "pr_ref=${{ github.event.inputs.pr_ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Wait for CI workflows to complete
        env:
          ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          WORKFLOWS: ${{ steps.parse.outputs.workflows }}
          PR_NUMBER: ${{ steps.parse.outputs.pr_number }}
          PR_REF: ${{ steps.parse.outputs.pr_ref }}
        run: |
          echo "‚è≥ Waiting for CI workflows to complete for PR #$PR_NUMBER..."

          # Define workflow file names
          declare -A workflow_files=(
            ["flutter"]="flutter_ci.yaml"
            ["rust"]="rust_ci.yaml"
            ["mobile"]="mobile_ci.yml"
            ["ios"]="ios_ci.yaml"
            ["rust_coverage"]="rust_coverage.yml"
            ["docker"]="docker_ci.yml"
            ["commit_lint"]="commit_lint.yml"
          )

          # Get list of workflows to monitor
          IFS=',' read -ra WORKFLOW_ARRAY <<< "$WORKFLOWS"

          echo "Monitoring workflows for PR #$PR_NUMBER: ${WORKFLOW_ARRAY[@]}"

          # Wait for workflows to complete (max 60 minutes)
          max_wait=3600
          wait_interval=30
          elapsed=0

          while [ $elapsed -lt $max_wait ]; do
            all_complete=true
            all_success=true
            workflow_status_summary=""

            for workflow in "${WORKFLOW_ARRAY[@]}"; do
              workflow_file="${workflow_files[$workflow]}"
              if [ -n "$workflow_file" ]; then
                echo "Checking status of workflow: $workflow_file for PR #$PR_NUMBER"

                # Get workflow runs that might be related to our PR
                response=$(curl -s -H "Authorization: token $ADMIN_GITHUB_TOKEN" \
                  "https://api.github.com/repos/AppFlowy-IO/AppFlowy-CI/actions/workflows/$workflow_file/runs?per_page=10")

                # Look for the most recent run that matches our criteria
                # We'll look for runs from the repository_dispatch event and check if they're related to our PR
                run_found=false
                status="unknown"
                conclusion="unknown"

                # Parse the JSON to find the relevant run
                for i in {0..9}; do
                  run_status=$(echo "$response" | jq -r --arg i "$i" '.workflow_runs[$i | tonumber].status // "null"')
                  run_conclusion=$(echo "$response" | jq -r --arg i "$i" '.workflow_runs[$i | tonumber].conclusion // "null"')
                  run_event=$(echo "$response" | jq -r --arg i "$i" '.workflow_runs[$i | tonumber].event // "null"')
                  run_created=$(echo "$response" | jq -r --arg i "$i" '.workflow_runs[$i | tonumber].created_at // "null"')

                  if [ "$run_status" = "null" ]; then
                    break
                  fi

                  # Check if this run is from repository_dispatch and within the last hour
                  if [ "$run_event" = "repository_dispatch" ]; then
                    run_created_timestamp=$(date -d "$run_created" +%s 2>/dev/null || echo "0")
                    current_timestamp=$(date +%s)
                    time_diff=$((current_timestamp - run_created_timestamp))

                    # If the run was created within the last hour, assume it's ours
                    if [ $time_diff -le 3600 ]; then
                      status="$run_status"
                      conclusion="$run_conclusion"
                      run_found=true
                      break
                    fi
                  fi
                done

                if [ "$run_found" = false ]; then
                  echo "  No recent workflow run found for $workflow, treating as pending"
                  status="pending"
                  conclusion="unknown"
                fi

                echo "  Status: $status, Conclusion: $conclusion"
                workflow_status_summary="$workflow_status_summary\n- $workflow: $status ($conclusion)"

                if [ "$status" != "completed" ]; then
                  all_complete=false
                fi

                if [ "$conclusion" != "success" ] && [ "$conclusion" != "unknown" ] && [ "$conclusion" != "null" ]; then
                  all_success=false
                fi
              fi
            done

            if [ "$all_complete" = true ]; then
              if [ "$all_success" = true ]; then
                echo "‚úÖ All workflows completed successfully for PR #$PR_NUMBER!"
                echo "all_workflows_passed=true" >> $GITHUB_ENV
                break
              else
                echo "‚ùå Some workflows failed for PR #$PR_NUMBER"
                echo "all_workflows_passed=false" >> $GITHUB_ENV
                break
              fi
            fi

            echo "‚è≥ Workflows still running for PR #$PR_NUMBER... waiting $wait_interval seconds"
            echo -e "Current status:$workflow_status_summary"
            sleep $wait_interval
            elapsed=$((elapsed + wait_interval))
          done

          if [ $elapsed -ge $max_wait ]; then
            echo "‚è∞ Timeout reached waiting for workflows for PR #$PR_NUMBER"
            echo "all_workflows_passed=false" >> $GITHUB_ENV
          fi

      - name: Auto-approve PR if all tests pass
        if: env.all_workflows_passed == 'true'
        env:
          ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.parse.outputs.pr_number }}
        run: |
          echo "üéâ All CI tests passed! Auto-approving PR #$PR_NUMBER"

          # Submit approval review
          curl -X POST \
            -H "Authorization: token $ADMIN_GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/AppFlowy-IO/AppFlowy-Premium/pulls/$PR_NUMBER/reviews \
            -d '{
              "event": "APPROVE",
              "body": "üöÄ **Auto-approved by CI for PR #'$PR_NUMBER'**\n\nAll automated tests have passed successfully:\n\n‚úÖ Build verification completed\n‚úÖ All tests passing\n‚úÖ Code quality checks passed\n\nThis PR is ready for merge!\n\n*Run ID: '${{ github.run_id }}'*"
            }'

          # Post a comment about the auto-approval
          curl -X POST \
            -H "Authorization: token $ADMIN_GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/AppFlowy-IO/AppFlowy-Premium/issues/$PR_NUMBER/comments \
            -d '{
              "body": "## ü§ñ Auto-Approval - PR #'$PR_NUMBER'\n\n**Status**: ‚úÖ **APPROVED**\n\nAll CI workflows have completed successfully for PR #'$PR_NUMBER'. This PR has been automatically approved and is ready for merge.\n\n### Passed Workflows\n'"$(echo "${{ steps.parse.outputs.workflows }}" | sed 's/,/\n- /g' | sed 's/^/- /')"'\n\n**Branch**: `${{ steps.parse.outputs.pr_ref }}`  \n**Run ID**: `${{ github.run_id }}`\n\n*Automated approval by GitHub Actions*"
            }'

          echo "‚úÖ PR #$PR_NUMBER has been auto-approved!"

      - name: Report failed tests
        if: env.all_workflows_passed == 'false'
        env:
          ADMIN_GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.parse.outputs.pr_number }}
        run: |
          echo "‚ùå Some CI tests failed or timed out for PR #$PR_NUMBER"

          # Post a comment about the failed tests
          curl -X POST \
            -H "Authorization: token $ADMIN_GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/AppFlowy-IO/AppFlowy-Premium/issues/$PR_NUMBER/comments \
            -d '{
              "body": "## ‚ùå CI Tests Status - PR #'$PR_NUMBER'\n\n**Status**: **FAILED** or **TIMEOUT**\n\nSome CI workflows have failed or did not complete within the expected time for PR #'$PR_NUMBER'. Please check the workflow results and fix any issues before merging.\n\n### Check Results\nView detailed results at: https://github.com/AppFlowy-IO/AppFlowy-CI/actions\n\n**Branch**: `${{ steps.parse.outputs.pr_ref }}`  \n**Run ID**: `${{ github.run_id }}`\n\n*Automated status update by GitHub Actions*"
            }'

          echo "‚ÑπÔ∏è  Failure notification posted to PR #$PR_NUMBER"