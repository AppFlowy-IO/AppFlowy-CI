name: Publish Public Docker Images

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build from"
        required: true
        default: "main"
      custom_tag:
        description: "Custom tag to use (overrides automatic tag generation). Example: 0.9.8"
        required: true
        default: ""
      build_gotrue:
        description: "Build GoTrue image"
        type: boolean
        required: false
        default: false
      build_appflowy_cloud:
        description: "Build AppFlowy Cloud image"
        type: boolean
        required: false
        default: true
      build_appflowy_worker:
        description: "Build AppFlowy Worker image"
        type: boolean
        required: false
        default: false
env:
  LATEST_TAG: latest
  LOCALHOST_URL: http://localhost
  LOCALHOST_WS: ws://localhost/ws/v1
  LOCALHOST_WS_V2: ws://localhost/ws/v2
  APPFLOWY_REDIS_URI: redis://redis:6379
  APPFLOWY_AI_REDIS_URL: redis://redis:6379
  LOCALHOST_GOTRUE: http://localhost/gotrue
  POSTGRES_PASSWORD: password
  DATABASE_URL: postgres://postgres:password@localhost:5432/postgres
  SQLX_OFFLINE: true
  RUST_TOOLCHAIN: "1.86.0"

jobs:
  gotrue_image:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.build_gotrue == 'true' }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-Cloud-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push GoTrue
        run: |
          export TAG="${{ github.event.inputs.custom_tag }}"
          docker buildx build --platform linux/amd64,linux/arm64 -t appflowyinc/gotrue:${TAG} -t appflowyinc/gotrue:latest -f docker/gotrue/Dockerfile --push docker/gotrue

  appflowy_cloud_image:
    runs-on: ${{ matrix.job.os }}
    if: ${{ github.event.inputs.build_appflowy_cloud == 'true' }}
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: "ubuntu-22.04", name: "amd64",   docker_platform: "linux/amd64" }
          - { os: "ubuntu-22.04-arm", name: "arm64v8", docker_platform: "linux/arm64" }

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-Cloud-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.hub.docker.com/${{ env.IMAGE_NAME }}

      - name: Build ${{ matrix.job.name }}:${{ env.GIT_TAG }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.job.docker_platform }}
          push: false
          load: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
            ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          build-args: |
            PROFILE=release
            FEATURES=${{ secrets.CI_APPFLOWY_CLOUD_FEATURES }}
            APP_VERSION=${{ env.GIT_TAG }}

      - name: Run Docker Compose
        run: |
          # Set environment variables for docker-compose
          export APPFLOWY_CLOUD_VERSION=${{ env.GIT_TAG }}-${{ matrix.job.name }}
          export APPFLOWY_WORKER_VERSION=latest-amd64
          export APPFLOWY_AI_VERSION=latest-amd64
          export APPFLOWY_ADMIN_FRONTEND_VERSION=latest-amd64
          # Retag the locally built image to match docker-compose-ci.yml image name
          docker tag ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }} appflowyinc/appflowy_cloud_premium:${{ env.GIT_TAG }}-${{ matrix.job.name }}
          docker tag ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }} appflowyinc/appflowy_cloud_premium:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
          
          cp deploy.env .env
          sed -i 's|GOTRUE_SMTP_ADMIN_EMAIL=.*|GOTRUE_SMTP_ADMIN_EMAIL=${{ secrets.CI_GOTRUE_SMTP_ADMIN_EMAIL }}|' .env
          sed -i 's|GOTRUE_EXTERNAL_GOOGLE_ENABLED=.*|GOTRUE_EXTERNAL_GOOGLE_ENABLED=true|' .env
          sed -i 's|GOTRUE_MAILER_AUTOCONFIRM=.*|GOTRUE_MAILER_AUTOCONFIRM=false|' .env
          sed -i 's|API_EXTERNAL_URL=http://your-host/gotrue|API_EXTERNAL_URL=http://localhost/gotrue|' .env
          sed -i 's|APPFLOWY_MAILER_SMTP_USERNAME=.*|APPFLOWY_MAILER_SMTP_USERNAME=${{ secrets.CI_GOTRUE_SMTP_USER }}|' .env
          sed -i 's|APPFLOWY_MAILER_SMTP_PASSWORD=.*|APPFLOWY_MAILER_SMTP_PASSWORD=${{ secrets.CI_GOTRUE_SMTP_PASS }}|' .env
          sed -i 's|APPFLOWY_WEB_URL=.*|APPFLOWY_WEB_URL=http://localhost:3000|' .env
          sed -i 's|.*APPFLOWY_S3_PRESIGNED_URL_ENDPOINT=.*|APPFLOWY_S3_PRESIGNED_URL_ENDPOINT=http://localhost/minio-api|' .env
          sed -i 's|APPFLOWY_SPAM_USER_DETECT_THRESHOLD=.*|APPFLOWY_SPAM_USER_DETECT_THRESHOLD=1|' .env
          
          sed -i 's|AI_APPFLOWY_HOST=.*|AI_APPFLOWY_HOST=http://localhost|' .env
          sed -i 's|AI_OPENAI_API_KEY=.*|AI_OPENAI_API_KEY=${{ secrets.CI_OPENAI_API_KEY }}|' .env
          sed -i 's|AI_OPENAI_API_SUMMARY_MODEL=.*|AI_OPENAI_API_SUMMARY_MODEL="gpt-4o-mini"|' .env
          sed -i 's|ANTHROPIC_API_KEY=.*|ANTHROPIC_API_KEY=${{ secrets.CI_AI_ANTHROPIC_API_KEY }}|' .env
          
          docker compose -f docker-compose-ci.yml up -d --no-build
          docker ps -a
          docker logs appflowy-cloud-premium-appflowy_cloud-1

      - name: Test server info
        run: |
          response=$(curl -s http://localhost/api/server-info)
          if [ $? -ne 0 ]; then
            echo "Failed to connect to server-info endpoint"
            exit 1
          fi
          echo "Server info response: $response"
          self_hosted=$(echo "$response" | jq -r '.data.self_hosted')
          if [ "$self_hosted" != "true" ]; then
            echo "ERROR: self_hosted field is '$self_hosted', expected 'true'"
            exit 1
          fi
          echo "âœ“ Server info test passed: self_hosted is true"

      - name: Push ${{ matrix.job.name }}:${{ env.GIT_TAG }}
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
          docker push ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }}

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_cloud_docker_manifest:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.build_appflowy_cloud == 'true' }}
    needs: [ appflowy_cloud_image ]
    strategy:
      fail-fast: false
      matrix:
        job:
          - { image_name: "appflowy_cloud" }

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Create and push manifest for ${{ matrix.job.image_name }}:version
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.GIT_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.GIT_TAG }}-amd64,${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.GIT_TAG }}-arm64v8
          push: true

      - name: Create and push manifest for ${{ matrix.job.image_name }}:latest
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.LATEST_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.LATEST_TAG }}-amd64,${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.LATEST_TAG }}-arm64v8
          push: true

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_worker_image:
    runs-on: ${{ matrix.job.os }}
    if: ${{ github.event.inputs.build_appflowy_worker == 'true' }}
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: "ubuntu-22.04", name: "amd64",   docker_platform: "linux/amd64" }
          - { os: "ubuntu-22.04-arm", name: "arm64v8", docker_platform: "linux/arm64" }

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-Cloud-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.hub.docker.com/${{ env.IMAGE_NAME }}
      
      - name: Log dir
        if: always()
        run: |
          ls -al

      - name: Build and push ${{ matrix.job.image_name }}:${{ env.GIT_TAG }}
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.job.docker_platform }}
          file: ./services/appflowy-worker/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
            ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          build-args: |
            PROFILE=release
            APP_VERSION=${{ env.GIT_TAG }}

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_worker_manifest:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.build_appflowy_worker == 'true' }}
    needs: [ appflowy_worker_image ]
    strategy:
      fail-fast: false
      matrix:
        job:
          - { image_name: "appflowy_worker" }

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Create and push manifest for ${{ matrix.job.image_name }}:version
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.GIT_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.GIT_TAG }}-amd64,${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.GIT_TAG }}-arm64v8
          push: true

      - name: Create and push manifest for ${{ matrix.job.image_name }}:latest
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.LATEST_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.LATEST_TAG }}-amd64,${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.job.image_name }}:${{ env.LATEST_TAG }}-arm64v8
          push: true

      - name: Logout from Docker Hub
        if: always()
        run: docker logout
