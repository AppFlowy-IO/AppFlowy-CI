name: Cloud Backend CI

on:
  repository_dispatch:
    types: [cloud-premium-backend-ci]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number from private repo'
        required: false
        type: string
      pr_ref:
        description: 'Git ref to checkout from private repo'
        required: false
        type: string
        default: 'main'

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: "1.86.0"
  DATABASE_URL: postgres://postgres:password@localhost:5432/appflowy_cloud

concurrency:
  group: ${{ github.workflow }}-${{ github.event.client_payload.pr_number || github.event.inputs.pr_number || github.ref }}
  cancel-in-progress: true

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: appflowy_cloud
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Set timezone for action
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "US/Pacific"

      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo docker image prune --all --force

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-Cloud-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.client_payload.pr_ref || github.event.inputs.pr_ref || 'main' }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: rustfmt, clippy
          profile: minimal

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ runner.os }}
          cache-on-failure: true
          workspaces: |
            .

      - name: Configure Git credentials for Cargo
        run: |
          git config --global credential.helper store
          echo "https://${{ secrets.ADMIN_GITHUB_TOKEN }}:x-oauth-basic@github.com" > ~/.git-credentials

      - name: Install diesel CLI
        run: cargo install diesel_cli --no-default-features --features postgres

      - name: Setup database
        run: |
          diesel migration run
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run backend tests
        env:
          RUST_LOG: info
          RUST_BACKTRACE: 1
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: redis://localhost:6379
          GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        run: |
          cargo test --workspace --exclude frontend --exclude desktop -- --test-threads=2

      - name: Run rustfmt
        run: cargo fmt --all -- --check
        env:
          GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - name: Run clippy
        run: cargo clippy --workspace --exclude frontend --exclude desktop --all-targets -- -D warnings
        env:
          GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}

      - name: Clean up Docker images
        if: always()
        run: |
          docker image prune -af
          docker volume prune -f